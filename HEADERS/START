#include <opencv2/core/utility.hpp>
#include <opencv2/tracking.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <iostream>
#include <cstring>
#include <ctime>
#include <sstream>
#include <fstream>
#include <omp.h>

using namespace std;
using namespace cv;

string globalfname="vehicle_counter.txt";

class VC {
private:
	VideoCapture cap;
	int curframe;
	bool didGrab;
	bool debug;
	int zzz;

void p(string s){
	if(debug) cout<<s<<endl;
}
	
public:


	void open(string file) {
		zzz=0;
		didGrab=false;
		debug=false;
		cap.open(file);
		if (!cap.isOpened()) {
			printf("Error opening!\n");
		}

		curframe = 0;
	}
	
	void dbg(bool n){
		debug=true;
	}
int skipa=0;

void setskip(int n){
 skipa=n;   
}

	void skip(int n) {
		p("skip()");
		zzz=n;
		for (int i = 0; i < n; i++) {
			
			p("\tgrab()");
			
			cap.grab();
			didGrab=true;
		}
		curframe += n;
	}

	bool read(Mat& image) {
		bool ret=true;
		p("read()");
		
stt:

		if(didGrab){
			
			
			Mat xx;
			for(int i=zzz-1;i>=0;i--)
			{	
				p("\tretrieve()");
				cap.retrieve(xx);
			}
			//cap>>xx;
			zzz=0;
			image=xx.clone();
			didGrab=false;
		} else {
			p("\tsimple_read()");
			ret=cap.read(image);
		}
		curframe++;
while(skipa-- > 0) goto stt;

		return ret;
	}
	
	void close(){
		cap.release();
	}

	bool cannext(){
		return cap.isOpened();
	}

	int index() {
		return curframe;
	}

double getFPS(){
	return cap.get(CV_CAP_PROP_FPS);
}

int getFourCC(){
	return cap.get(CV_CAP_PROP_FOURCC);
}

Size getSize(){
	Size S = Size((int) cap.get(CV_CAP_PROP_FRAME_WIDTH),    // Acquire input size
                  (int) cap.get(CV_CAP_PROP_FRAME_HEIGHT));
                 return S;
}

};


VC video;


#include <opencv2/tracking.hpp>

inline cv::Ptr<cv::Tracker> createTrackerByName(cv::String name)
{
    cv::Ptr<cv::Tracker> tracker;

    if (name == "KCF")
        tracker = cv::TrackerKCF::create();
    else if (name == "TLD")
        tracker = cv::TrackerTLD::create();
    else if (name == "BOOSTING")
        tracker = cv::TrackerBoosting::create();
    else if (name == "MEDIAN_FLOW")
        tracker = cv::TrackerMedianFlow::create();
    else if (name == "MIL")
        tracker = cv::TrackerMIL::create();
    else if (name == "GOTURN")
        tracker = cv::TrackerGOTURN::create();
    else if (name == "MOSSE")
        tracker = cv::TrackerMOSSE::create();
    else
        CV_Error(cv::Error::StsBadArg, "Invalid tracking algorithm name\n");

    return tracker;
}



void erode(Mat& frame){
int erosion_type = MORPH_RECT;
int erosion_size = 1;
Mat element = getStructuringElement( erosion_type,
                                       Size( 2*erosion_size + 1, 2*erosion_size+1 ),
                                       Point( erosion_size, erosion_size ) );

  /// Apply the erosion operation
  erode( frame, frame, element );
}

void gray(Mat& frame){
cvtColor(frame, frame, CV_BGR2GRAY);
}


void point(Mat& frame, Point2d p){

rectangle( frame, Rect(p.x,p.y,2,2), Scalar( 255, 0, 200 ), 2, 1 );
}

void points(Mat& frame, vector<Rect2d> r){
    for(int i=0;i<r.size();i++){
    point(frame, Point2d(r[i].x+r[i].width/2.0,r[i].y+r[i].height/2.0));
}
}

void rect(Mat& frame, Rect2d r){

        rectangle( frame, r, Scalar( 255, 0, 200 ), 2, 1 ); 
}

void rects(Mat& frame, vector<Rect2d> r){
    for(int i=0;i<r.size();i++){
    


        rectangle( frame, r[i], Scalar( 255, 0, 200 ), 2, 1 ); 
}
}

vector<string> mascnames;
vector<Mat> mascmats;

void masking(Mat& frame, string fname){
	bool notfound=true;
	for (int i = 0; i < mascnames.size(); i++)
	{
		if(mascnames[i].compare(fname)==0){
			bitwise_and(frame,mascmats[i],frame);
			notfound=false;
		}
	}
	
	if(notfound){
		mascnames.push_back(fname);


        Mat m = imread(fname.c_str());
        resize(m, m, frame.size(), INTER_NEAREST);
		mascmats.push_back(m);
		bitwise_and(frame, mascmats.back(), frame);
	}
}


void scaling(Mat& frame, double sc){
    resize(frame, frame, Size(), sc, sc, INTER_NEAREST);
}

#define START \
bool initFunction(Mat & frame)
#define LOOP \
bool processingFunction(Mat &frame)
#define SHOW \
bool showFunction(Mat &frame)
#define KEYSPACE \
void keyspace(Mat &frame)

#define OK true



#define CONCAT_(x,y) x##y
#define CONCAT(x,y) CONCAT_(x,y)

#define RECTS(X)  \
    for(int CONCAT(tmpvar, __LINE__)=0;CONCAT(tmpvar, __LINE__)<X.size();CONCAT(tmpvar, __LINE__)++){ rectangle( frame, X[CONCAT(tmpvar, __LINE__)], Scalar( 255, 0, 200 ), 2, 1 ); }


#define SCALE1ARG(DIM) {resize(frame, frame, Size(), DIM, DIM, INTER_NEAREST);}
#define SCALE2ARG(FRAME,DIM) {resize(FRAME, FRAME, Size(), DIM, DIM, INTER_NEAREST);}

#define GET_3TH_ARG(arg1, arg2, arg3, ...) arg3
#define MACRO_CHOOSER(...) \
    GET_3TH_ARG(__VA_ARGS__, SCALE2ARG, SCALE1ARG, )

#define SCALE(...) MACRO_CHOOSER(__VA_ARGS__)(__VA_ARGS__)

